main_page 
from flask import Flask, render_template, request
from amazon_product import get_amazon_product_details
from flipkart_product import get_flipkart_product_details

app = Flask(__name__)


def choose_website(website_name, product_id):
    if website_name.lower() == "amazon":
        first_scrape, second_scrape = get_amazon_product_details(product_id)
    elif website_name.lower() == "flipkart":
        first_scrape, second_scrape = get_flipkart_product_details(product_id)
    else:
        first_scrape = {"error": "Unsupported website. Please enter either 'amazon' or 'flipkart'."}
        second_scrape = {"error": "Unsupported website. Please enter either 'amazon' or 'flipkart'."}

    return first_scrape, second_scrape


@app.route('/', methods=['GET', 'POST'])
def index():
    first_scrape = None
    second_scrape = None
    if request.method == 'POST':
        website_name = request.form['website_name']
        product_id = request.form['product_id']

        first_scrape, second_scrape = choose_website(website_name, product_id)
    return render_template('index.html', first_scrape=first_scrape, second_scrape=second_scrape)

if __name__ == '__main__':
    app.run(debug=True)
#
# if __name__ == "__main__":
#     website_name = input('Enter the website name (amazon/flipkart): ').strip()
#     product_id = input('Enter the product ID: ').strip()
#     choose_website(website_name, product_id)


####################################################################################index_html
<!DOCTYPE html>
<html>
<head>
    <title>Product Crawler</title>
</head>
<body>
    <h2>Enter Product ID</h2>
    <form method="POST">
        <input type="text" name="website_name" placeholder="Enter the website name (amazon/flipkart)" required>
        <input type="text" name="product_id" placeholder="Enter Product ID" required>
        <button type="submit">Fetch Product</button>
    </form>

    {% if first_scrape %}
        {% if first_scrape.error %}
            <p>Error: {{ first_scrape.error }}</p>
        {% else %}
            <h3>Product Details</h3>
            <p><strong>Title:</strong> {{ first_scrape.title }}</p>
            <p><strong>Price:</strong> {{ first_scrape.price }}</p>
            <p><strong>Rating:</strong> {{ first_scrape.rating }}</p>
        {% endif %}
    {% endif %}

    {% if waiting %}
        <p>Waiting for 15 minutes to perform second scrape... Page will refresh automatically.</p>
    {% endif %}

    {% if second_scrape %}
        {% if second_scrape.error %}
            <p>Error: {{ second_scrape.error }}</p>
        {% else %}
            <h3>Product Details</h3>
            <p><strong>Title:</strong> {{ second_scrape.title }}</p>
            <p><strong>Price:</strong> {{ second_scrape.price }}</p>
            <p><strong>Rating:</strong> {{ second_scrape.rating }}</p>
        {% endif %}
    {% endif %}
</body>
</html>


####################################################################################amazon product
# from flask import Flask, render_template, request
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
# import time

# app = Flask(__name__)

def get_amazon_product_details(product_id):
    # Set Chrome options
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("user-agent=Mozilla/5.0")

    # Set ChromeDriver path (update this)
    service = Service(executable_path="C:/Users/Admin/PycharmProjects2/Web_scrapping/chromedriver-win64"
                                      "/chromedriver.exe")  # <-- CHANGE THIS
    driver = webdriver.Chrome(service=service, options=options)

    url = f"https://www.amazon.in/dp/{product_id}"

    def scrape():
        try:
            # Wait for product title to be present
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.ID, "productTitle"))
            )

            soup = BeautifulSoup(driver.page_source, 'html.parser')

            title_tag = soup.find(id='productTitle')
            price_tag = soup.find(class_='a-price-whole')
            rating_tag = soup.find('span', {'class': 'a-icon-alt'})

            title = title_tag.get_text(strip=True) if title_tag else 'Title not found'
            price = price_tag.get_text(strip=True) if price_tag else 'Price not found'
            rating = rating_tag.get_text(strip=True) if rating_tag else 'Rating not found'

            return {
                'title': title,
                'price': f"â‚¹ {price}",
                'rating': rating
            }

        except Exception as e:
            return {'error': str(e)}

    try:
        # First scrape
        driver.get(url)
        # print("Scraping first time...")
        first_scrape = scrape()

        # print("\nFirst Scrape Result:")
        # for k, v in first_scrape.items():
            # print(f"{k.title()}: {v}")

        # Wait 15 minutes
        # print("\nWaiting for 15 minutes before refresh...\n")
        # time.sleep(60)

        # Refresh and scrape again
        # print("Refreshing and scraping again...")
        driver.refresh()
        second_scrape = scrape()

        # print("\nSecond Scrape Result:")
        # for k, v in second_scrape.items():
        #     print(f"{k.title()}: {v}")
        return first_scrape, second_scrape

    finally:
        driver.quit()

# @app.route('/', methods=['GET', 'POST'])
# def index():
#     data = None
#     if request.method == 'POST':
#         product_id = request.form['product_id']
#         data = get_amazon_product_details(product_id)
#     # return render_template('index.html', data=data)
#
# if __name__ == '__main__':
#     app.run(debug=True)

##################################################################################### new html page
<!DOCTYPE html>
<html>
<head>
    <title>Product Crawler</title>
    {% if first_scrape and not second_scrape %}
        <meta http-equiv="refresh" content="60"> <!-- Refresh every 60 seconds -->
    {% endif %}
</head>
<body>
    <h2>Enter Product ID</h2>
    <form method="POST">
        <input type="text" name="website_name" placeholder="amazon / flipkart" required>
        <input type="text" name="product_id" placeholder="Enter Product ID" required>
        <button type="submit">Fetch Product</button>
    </form>

    {% if first_scrape %}
        <h3>First Scrape (Now)</h3>
        {% if first_scrape.error %}
            <p style="color:red;">Error: {{ first_scrape.error }}</p>
        {% else %}
            <p><strong>Title:</strong> {{ first_scrape.title }}</p>
            <p><strong>Price:</strong> {{ first_scrape.price }}</p>
            <p><strong>Rating:</strong> {{ first_scrape.rating }}</p>
        {% endif %}
    {% endif %}

    {% if second_scrape %}
        <h3>Second Scrape (After 15 mins)</h3>
        {% if second_scrape.error %}
            <p style="color:red;">Error: {{ second_scrape.error }}</p>
        {% else %}
            <p><strong>Title:</strong> {{ second_scrape.title }}</p>
            <p><strong>Price:</strong> {{ second_scrape.price }}</p>
            <p><strong>Rating:</strong> {{ second_scrape.rating }}</p>
        {% endif %}
    {% elif first_scrape %}
        <p style="color:gray;">Second scrape will be available after 15 minutes. Auto-refresh is enabled.</p>
    {% endif %}
</body>
</html>

